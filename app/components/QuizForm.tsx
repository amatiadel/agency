'use client'

import { motion, AnimatePresence } from 'framer-motion'
import { useState } from 'react'
import { cn } from '@/lib/utils'

interface QuizFormProps {
  className?: string
}

interface QuizData {
  existingSite: string
  fieldOfActivity: string
  keyTask: string
  developmentSpeed: string
  budget: string
  contactMethod: string
  phoneNumber: string
  name: string
}

const QuizForm: React.FC<QuizFormProps> = ({ className }) => {
  const [currentStep, setCurrentStep] = useState(1)
  const [showSuccessModal, setShowSuccessModal] = useState(false)
  const [formData, setFormData] = useState<QuizData>({
    existingSite: '',
    fieldOfActivity: '',
    keyTask: '',
    developmentSpeed: '',
    budget: '',
    contactMethod: '',
    phoneNumber: '',
    name: ''
  })

  const totalSteps = 5

  const handleInputChange = (field: keyof QuizData, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }))
  }

  const nextStep = () => {
    if (currentStep < totalSteps) {
      setCurrentStep(currentStep + 1)
    } else {
      // Move to contact form
      setCurrentStep(6)
    }
  }

  const prevStep = () => {
    if (currentStep > 1) {
      setCurrentStep(currentStep - 1)
    }
  }

  const handleSubmit = async () => {
    // Handle final form submission
    console.log('Form submitted:', formData)
    
    // Send to Telegram
    try {
      const message = `
üéØ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å–∞–π—Ç–∞:

üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ:
‚Ä¢ –ï—Å—Ç—å –ª–∏ —Å–∞–π—Ç: ${formData.existingSite === 'existing' ? '–ï—Å—Ç—å —Å–∞–π—Ç' : '–ù—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Å –Ω—É–ª—è'}
‚Ä¢ –°—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: ${formData.fieldOfActivity}
‚Ä¢ –ö–ª—é—á–µ–≤–∞—è –∑–∞–¥–∞—á–∞: ${formData.keyTask}
‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: ${formData.developmentSpeed}
‚Ä¢ –ë—é–¥–∂–µ—Ç: ${formData.budget}

üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
‚Ä¢ –°–ø–æ—Å–æ–± —Å–≤—è–∑–∏: ${formData.contactMethod}
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: ${formData.phoneNumber}
‚Ä¢ –ò–º—è: ${formData.name}
      `

      const response = await fetch('/api/send-telegram', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ message }),
      })

      if (response.ok) {
        setShowSuccessModal(true)
      } else {
        alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
      }
    } catch (error) {
      console.error('Error sending to Telegram:', error)
      alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
    }
  }

  const renderStep = () => {
    switch (currentStep) {
      case 1:
        return (
          <div className="space-y-6">
            <div className="flex items-center justify-between">
              <h3 className="text-2xl font-bold text-foreground">
                –ï—Å—Ç—å –ª–∏ –¥–µ–π—Å—Ç–≤—É—é—â–∏–π —Å–∞–π—Ç –∏–ª–∏ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ —Å –Ω—É–ª—è?
              </h3>
              <div className="text-sm text-muted-foreground">
                {currentStep}/{totalSteps}
              </div>
            </div>
            <div className="space-y-4">
              <label className="flex items-center space-x-3 cursor-pointer">
                <input
                  type="radio"
                  name="existingSite"
                  value="existing"
                  checked={formData.existingSite === 'existing'}
                  onChange={(e) => handleInputChange('existingSite', e.target.value)}
                  className="w-5 h-5 text-blue-600 border-gray-300 focus:ring-blue-500"
                />
                <span className="text-lg text-foreground">–ï—Å—Ç—å —Å–∞–π—Ç</span>
              </label>
              <label className="flex items-center space-x-3 cursor-pointer">
                <input
                  type="radio"
                  name="existingSite"
                  value="new"
                  checked={formData.existingSite === 'new'}
                  onChange={(e) => handleInputChange('existingSite', e.target.value)}
                  className="w-5 h-5 text-blue-600 border-gray-300 focus:ring-blue-500"
                />
                <span className="text-lg text-foreground">–ù—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Å–∞–π—Ç —Å –Ω—É–ª—è</span>
              </label>
            </div>
          </div>
        )

      case 2:
        return (
          <div className="space-y-6">
            <div className="flex items-center justify-between">
              <h3 className="text-2xl font-bold text-foreground">
                –í–∞—à–∞ —Å—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:
              </h3>
              <div className="text-sm text-muted-foreground">
                {currentStep}/{totalSteps}
              </div>
            </div>
            <select
              value={formData.fieldOfActivity}
              onChange={(e) => handleInputChange('fieldOfActivity', e.target.value)}
              className="w-full p-4 border border-gray-300 rounded-lg text-lg focus:ring-2 focus:ring-accent focus:border-accent bg-white text-gray-900"
            >
              <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ñ–µ—Ä—É –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</option>
              <option value="construction">–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ</option>
              <option value="production">–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ</option>
              <option value="it">IT</option>
              <option value="medicine">–ú–µ–¥–∏—Ü–∏–Ω–∞</option>
              <option value="services">–°—Ñ–µ—Ä–∞ —É—Å–ª—É–≥</option>
              <option value="infobusiness">–ò–Ω—Ñ–æ–±–∏–∑–Ω–µ—Å –∏ —Ä–µ–∫–ª–∞–º–∞</option>
              <option value="events">–û–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è</option>
              <option value="other">–î—Ä—É–≥–æ–µ</option>
            </select>
          </div>
        )

      case 3:
        return (
          <div className="space-y-6">
            <div className="flex items-center justify-between">
              <h3 className="text-2xl font-bold text-foreground">
                –ö–ª—é—á–µ–≤–∞—è –∑–∞–¥–∞—á–∞ –Ω–∞ –ø—Ä–æ–µ–∫—Ç
              </h3>
              <div className="text-sm text-muted-foreground">
                {currentStep}/{totalSteps}
              </div>
            </div>
            <textarea
              value={formData.keyTask}
              onChange={(e) => handleInputChange('keyTask', e.target.value)}
              placeholder="–ó–∞–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É –≤ –ø–æ–ª–µ –Ω–∏–∂–µ"
              className="w-full p-4 border border-gray-300 rounded-lg text-lg focus:ring-2 focus:ring-accent focus:border-accent h-32 resize-none bg-white text-gray-900 placeholder-gray-500"
            />
          </div>
        )

      case 4:
        return (
          <div className="space-y-6">
            <div className="flex items-center justify-between">
              <h3 className="text-2xl font-bold text-foreground">
                –ï—Å—Ç—å –ª–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏?
              </h3>
              <div className="text-sm text-muted-foreground">
                {currentStep}/{totalSteps}
              </div>
            </div>
            <div className="space-y-4">
              <label className="flex items-center space-x-3 cursor-pointer">
                <input
                  type="radio"
                  name="developmentSpeed"
                  value="no"
                  checked={formData.developmentSpeed === 'no'}
                  onChange={(e) => handleInputChange('developmentSpeed', e.target.value)}
                  className="w-5 h-5 text-blue-600 border-gray-300 focus:ring-blue-500"
                />
                <span className="text-lg text-foreground">–ù–µ—Ç</span>
              </label>
              <label className="flex items-center space-x-3 cursor-pointer">
                <input
                  type="radio"
                  name="developmentSpeed"
                  value="1month"
                  checked={formData.developmentSpeed === '1month'}
                  onChange={(e) => handleInputChange('developmentSpeed', e.target.value)}
                  className="w-5 h-5 text-blue-600 border-gray-300 focus:ring-blue-500"
                />
                <span className="text-lg text-foreground">–ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ –º–µ—Å—è—Ü</span>
              </label>
              <label className="flex items-center space-x-3 cursor-pointer">
                <input
                  type="radio"
                  name="developmentSpeed"
                  value="2-3months"
                  checked={formData.developmentSpeed === '2-3months'}
                  onChange={(e) => handleInputChange('developmentSpeed', e.target.value)}
                  className="w-5 h-5 text-blue-600 border-gray-300 focus:ring-blue-500"
                />
                <span className="text-lg text-foreground">–ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 2-3 –º–µ—Å—è—Ü–∞</span>
              </label>
              <label className="flex items-center space-x-3 cursor-pointer">
                <input
                  type="radio"
                  name="developmentSpeed"
                  value="accelerated"
                  checked={formData.developmentSpeed === 'accelerated'}
                  onChange={(e) => handleInputChange('developmentSpeed', e.target.value)}
                  className="w-5 h-5 text-blue-600 border-gray-300 focus:ring-blue-500"
                />
                <span className="text-lg text-foreground">–ù—É–∂–Ω–∞ —É—Å–∫–æ—Ä–µ–Ω–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞</span>
              </label>
            </div>
          </div>
        )

      case 5:
        return (
          <div className="space-y-6">
            <div className="flex items-center justify-between">
              <h3 className="text-2xl font-bold text-foreground">
                –í–∞—à –±—é–¥–∂–µ—Ç –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É —Å–∞–π—Ç–∞
              </h3>
              <div className="text-sm text-muted-foreground">
                {currentStep}/{totalSteps}
              </div>
            </div>
            <div className="space-y-4">
              <label className="flex items-center space-x-3 cursor-pointer">
                <input
                  type="radio"
                  name="budget"
                  value="300-500"
                  checked={formData.budget === '300-500'}
                  onChange={(e) => handleInputChange('budget', e.target.value)}
                  className="w-5 h-5 text-blue-600 border-gray-300 focus:ring-blue-500"
                />
                <span className="text-lg text-foreground">300.000 - 500.000 ‚ÇΩ</span>
              </label>
              <label className="flex items-center space-x-3 cursor-pointer">
                <input
                  type="radio"
                  name="budget"
                  value="500-700"
                  checked={formData.budget === '500-700'}
                  onChange={(e) => handleInputChange('budget', e.target.value)}
                  className="w-5 h-5 text-blue-600 border-gray-300 focus:ring-blue-500"
                />
                <span className="text-lg text-foreground">500.000 - 700.000 ‚ÇΩ</span>
              </label>
              <label className="flex items-center space-x-3 cursor-pointer">
                <input
                  type="radio"
                  name="budget"
                  value="700-1000"
                  checked={formData.budget === '700-1000'}
                  onChange={(e) => handleInputChange('budget', e.target.value)}
                  className="w-5 h-5 text-blue-600 border-gray-300 focus:ring-blue-500"
                />
                <span className="text-lg text-foreground">700.000 - 1.000.000 ‚ÇΩ</span>
              </label>
              <label className="flex items-center space-x-3 cursor-pointer">
                <input
                  type="radio"
                  name="budget"
                  value="1000+"
                  checked={formData.budget === '1000+'}
                  onChange={(e) => handleInputChange('budget', e.target.value)}
                  className="w-5 h-5 text-blue-600 border-gray-300 focus:ring-blue-500"
                />
                <span className="text-lg text-foreground">1.000.000 ‚ÇΩ +</span>
              </label>
            </div>
          </div>
        )

      case 6:
        return (
          <div className="space-y-6">
            <div className="space-y-2">
              <h3 className="text-2xl font-bold text-foreground">
                –í–ó–Ø–õ–ò –ò–ù–§–û–†–ú–ê–¶–ò–Æ –í –†–ê–ë–û–¢–£
              </h3>
              <p className="text-muted-foreground text-lg">
                –ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –º—ã —Å–≤—è–∂–µ–º—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ, –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π
              </p>
            </div>

            <div className="space-y-6">
              <div>
                <h4 className="text-xl font-bold text-foreground mb-4">
                  –ö–∞–∫ –±—É–¥–µ—Ç —É–¥–æ–±–Ω–µ–µ —Å–≤—è–∑–∞—Ç—å—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏?
                </h4>
                <select
                  value={formData.contactMethod}
                  onChange={(e) => handleInputChange('contactMethod', e.target.value)}
                  className="w-full p-4 border border-gray-300 rounded-lg text-lg focus:ring-2 focus:ring-accent focus:border-accent bg-white text-gray-900"
                >
                  <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏</option>
                  <option value="telegram">Telegram</option>
                  <option value="whatsapp">WhatsApp</option>
                  <option value="phone">–¢–µ–ª–µ—Ñ–æ–Ω</option>
                  <option value="email">Email</option>
                </select>
              </div>

              <div>
                <label className="block text-lg font-medium text-foreground mb-2">
                  –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–≤—è–∑–∞–Ω –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä
                </label>
                <div className="flex">
                  <div className="flex items-center px-4 border border-gray-300 border-r-0 rounded-l-lg bg-gray-50">
                    <span className="text-lg">üá∑üá∫</span>
                    <span className="ml-2 text-lg text-gray-900">+7</span>
                  </div>
                  <input
                    type="tel"
                    value={formData.phoneNumber}
                    onChange={(e) => handleInputChange('phoneNumber', e.target.value)}
                    placeholder="(000) 000-00-00"
                    className="flex-1 p-4 border border-gray-300 rounded-r-lg text-lg focus:ring-2 focus:ring-accent focus:border-accent bg-white text-gray-900"
                  />
                </div>
              </div>

              <div>
                <input
                  type="text"
                  value={formData.name}
                  onChange={(e) => handleInputChange('name', e.target.value)}
                  placeholder="–í–∞—à–µ –∏–º—è"
                  className="w-full p-4 border border-gray-300 rounded-lg text-lg focus:ring-2 focus:ring-accent focus:border-accent bg-white text-gray-900"
                />
              </div>
            </div>
          </div>
        )

      default:
        return null
    }
  }

  const isStepValid = () => {
    switch (currentStep) {
      case 1:
        return formData.existingSite !== ''
      case 2:
        return formData.fieldOfActivity !== ''
      case 3:
        return formData.keyTask.trim() !== ''
      case 4:
        return formData.developmentSpeed !== ''
      case 5:
        return formData.budget !== ''
      case 6:
        return formData.contactMethod !== '' && formData.phoneNumber !== '' && formData.name !== ''
      default:
        return false
    }
  }

  return (
    <section className={cn('py-20 px-4 sm:px-6 lg:px-8 xl:px-4', className)}>
      <div className="w-full">
        <div className="max-w-6xl mx-auto lg:max-w-none xl:max-w-none">
          <div className="bg-muted rounded-2xl p-8 lg:p-12 shadow-lg">
            <div className="grid lg:grid-cols-2 gap-8 min-h-[600px]">
              {/* Left Side - Information */}
              <div className="bg-gradient-to-br from-orange-600 to-orange-800 rounded-2xl p-8 lg:p-12 flex items-center justify-center relative overflow-hidden">
                <div className="absolute inset-0 bg-orange-500 opacity-20">
                  <div className="absolute top-10 left-10 w-32 h-32 bg-orange-400 rounded-full opacity-30"></div>
                  <div className="absolute bottom-10 right-10 w-24 h-24 bg-orange-300 rounded-full opacity-40"></div>
                  <div className="absolute top-1/2 left-1/4 w-16 h-16 bg-orange-500 rounded-full opacity-25"></div>
                </div>
                <div className="relative z-10 text-center">
                  <h2 className="text-4xl sm:text-5xl lg:text-6xl xl:text-7xl font-bold text-white leading-tight druk-font">
                    –£–∑–Ω–∞–π—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å<br />
                    —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å–∞–π—Ç–∞<br />
                    –¥–ª—è –í–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
                  </h2>
                </div>
              </div>

              {/* Right Side - Quiz Form */}
              <div className="p-4 lg:p-8">
                <div className="space-y-6">
                  {/* Header */}
                  <div className="space-y-2 mb-12">
                    <h3 className="text-2xl sm:text-3xl font-bold text-foreground">
                      –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ 5 –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
                    </h3>
                    <p className="text-lg sm:text-xl text-muted-foreground">
                      –≠—Ç–æ —Å–æ–∫—Ä–∞—Ç–∏—Ç –≤—Ä–µ–º—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –∏ —É–≤–µ–ª–∏—á–∏—Ç —Ç–æ—á–Ω–æ—Å—Ç—å —Ä–∞—Å—á–µ—Ç–∞
                    </p>
                  </div>

                  {/* Visual Separator */}
                  <div className="border-t border-gray-300 mb-8"></div>

                {/* Form Content */}
                <AnimatePresence mode="wait">
                  <motion.div
                    key={currentStep}
                    initial={{ opacity: 0, x: 20 }}
                    animate={{ opacity: 1, x: 0 }}
                    exit={{ opacity: 0, x: -20 }}
                    transition={{ duration: 0.3 }}
                  >
                    {renderStep()}
                  </motion.div>
                </AnimatePresence>

                {/* Navigation */}
                <div className="flex justify-between items-center pt-6">
                  {currentStep > 1 && currentStep <= totalSteps && (
                    <button
                      onClick={prevStep}
                      className="px-6 py-3 rounded-lg font-medium text-gray-600 hover:text-gray-800 hover:bg-gray-100 transition-colors"
                    >
                      –ù–∞–∑–∞–¥
                    </button>
                  )}

                  {currentStep < totalSteps ? (
                    <button
                      onClick={nextStep}
                      disabled={!isStepValid()}
                      className={cn(
                        'px-8 py-3 rounded-lg font-medium text-white transition-colors ml-auto',
                        isStepValid()
                          ? 'bg-accent hover:bg-accent/90'
                          : 'bg-gray-300 cursor-not-allowed'
                      )}
                    >
                      –î–∞–ª–µ–µ
                    </button>
                  ) : currentStep === totalSteps ? (
                    <button
                      onClick={nextStep}
                      disabled={!isStepValid()}
                      className={cn(
                        'px-8 py-3 rounded-lg font-medium text-white transition-colors ml-auto',
                        isStepValid()
                          ? 'bg-accent hover:bg-accent/90'
                          : 'bg-gray-300 cursor-not-allowed'
                      )}
                    >
                      –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—á–µ—Ç
                    </button>
                  ) : (
                    <button
                      onClick={handleSubmit}
                      disabled={!isStepValid()}
                      className={cn(
                        'px-8 py-3 rounded-lg font-medium text-white transition-colors ml-auto',
                        isStepValid()
                          ? 'bg-accent hover:bg-accent/90'
                          : 'bg-gray-300 cursor-not-allowed'
                      )}
                    >
                      –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
                    </button>
                  )}
                </div>

                </div>
              </div>
            </div>
            
          </div>
        </div>
      </div>

      {/* Success Modal */}
      <AnimatePresence>
        {showSuccessModal && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4"
            onClick={() => setShowSuccessModal(false)}
          >
            <motion.div
              initial={{ scale: 0.8, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.8, opacity: 0 }}
              className="bg-white rounded-2xl p-8 max-w-md w-full mx-4 shadow-2xl"
              onClick={(e) => e.stopPropagation()}
            >
              <div className="text-center">
                {/* Success Icon */}
                <motion.div
                  initial={{ scale: 0 }}
                  animate={{ scale: 1 }}
                  transition={{ delay: 0.2, type: "spring", stiffness: 200 }}
                  className="w-20 h-20 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-6"
                >
                  <svg
                    className="w-10 h-10 text-green-600"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth={2}
                      d="M5 13l4 4L19 7"
                    />
                  </svg>
                </motion.div>

                {/* Success Message */}
                <motion.h3
                  initial={{ y: 20, opacity: 0 }}
                  animate={{ y: 0, opacity: 1 }}
                  transition={{ delay: 0.3 }}
                  className="text-2xl font-bold text-gray-900 mb-4 druk-font"
                >
                  –°–ø–∞—Å–∏–±–æ!
                </motion.h3>

                <motion.p
                  initial={{ y: 20, opacity: 0 }}
                  animate={{ y: 0, opacity: 1 }}
                  transition={{ delay: 0.4 }}
                  className="text-lg text-gray-600 mb-8"
                >
                  –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.
                </motion.p>

                {/* Close Button */}
                <motion.button
                  initial={{ y: 20, opacity: 0 }}
                  animate={{ y: 0, opacity: 1 }}
                  transition={{ delay: 0.5 }}
                  onClick={() => setShowSuccessModal(false)}
                  className="w-full bg-accent text-white py-3 px-6 rounded-lg font-medium hover:bg-accent/90 transition-colors duration-200 druk-font"
                >
                  –ó–∞–∫—Ä—ã—Ç—å
                </motion.button>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </section>
  )
}

export default QuizForm
